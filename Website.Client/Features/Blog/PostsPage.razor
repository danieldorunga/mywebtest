@page "/posts"
@inject NavigationManager _navigationManager;
@inject HttpClient _client;

<section class="section">
    @if (IsLoading)
    {
        <Loading></Loading>
    }
    else
    {
        <div class="columns">
            @foreach (var post in All.OrderByDescending(p => p.CreatedUtc))
            {
                <div class="column is-half">
                    <div class="card">
                        <div class="card-content">
                            <p class="title is-4 mb-0">
                                @post.Title
                            </p>
                            <p class="is-size-6 mb-2">@GetWrittenAgoText(post.CreatedUtc)</p>
                            <p>
                                @post.Description
                            </p>
                            <p class="mt-5">
                                <TechTags Tags="@post.Tags"></TechTags>
                            </p>
                        </div>
                        <footer class="card-footer">
                            <p class="card-footer-item is-justify-content-start">
                                <NavLink href="@ReadUrl(post.Id)">
                                    <span class="icon-text has-text-primary">
                                        <span class="icon">
                                            <i class="fa fa-book"></i>
                                        </span>
                                        <span>Read</span>
                                    </span>
                                </NavLink>
                            </p>
                        </footer>
                    </div>
                </div>
            }
        </div>
    }

</section>


@code {

    protected override async Task OnInitializedAsync()
    {
        await Load();
        await base.OnInitializedAsync();
    }

    List<Post> All { get; set; } = new();

    public string GetWrittenAgoText(DateTime created)
    {
        var diff = DateTime.Now - created;

        if (diff.Days is 0)
        {
            return $"Posted today";
        }

        if (DateTime.Now.Month - created.Month is 0)
        {
            return $"Posted {diff.Days} days ago.";
        }
        if (diff.Days > 365)
        {
            return $"Posted {DateTime.Now.Year - created.Year} years ago";
        }
        return $"Posted {diff.Days} days ago.";
    }

    public string ReadUrl(string postId) => $"posts/{postId}";

    bool IsLoading { get; set; } = false;

    private async Task Load()
    {
        IsLoading = true;
        All = await _client.GetFromJsonAsync<List<Post>>("api/blog");
        IsLoading = false;
    }

    private void View(string postId)
        => _navigationManager.NavigateTo($"posts/{postId}");

}