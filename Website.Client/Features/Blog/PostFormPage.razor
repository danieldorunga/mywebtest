@page "/posts/new"
@page "/posts/edit/{id}"
@attribute [Authorize(Roles = Roles.Contributor)]
@inject HttpClient _client;
@inject NavigationManager _navigationManager;

<div class="container">
    <section class="section">
        <div class="panel">
            <p class="panel-heading">Add Post</p>
            <div class="p-4">
                <EditForm EditContext="@EditContext" OnValidSubmit="SavePost">
                    <FluentValidationValidator/>

                    <div class="columns is-multiline">
                        <div class="column is-half">
                            <div class="field">
                                <label class="label">Id</label>
                                <div class="control">
                                    <InputText @bind-Value="@Post.Id" class="input" type="text" placeholder="super-cool-blog-post"/>
                                    <ValidationMessage For="() => Post.Id"></ValidationMessage>
                                </div>
                            </div>
                        </div>

                        <div class="column is-half">
                            <div class="field">
                                <label class="label">Title</label>
                                <div class="control">
                                    <InputText @bind-Value="@Post.Title" class="input" type="text" placeholder="Getting Started - Cool Post"/>
                                    <ValidationMessage For="() => Post.Title"></ValidationMessage>
                                </div>
                            </div>
                        </div>

                        <div class="column is-full">
                            <div class="field">
                                <label class="label">Description</label>
                                <div class="control">
                                    <InputTextArea @bind-Value="@Post.Description" class="textarea" placeholder="A detailed description for this post."></InputTextArea>
                                    <ValidationMessage For="() => Post.Description"></ValidationMessage>
                                </div>
                            </div>
                        </div>

                        <div class="column is-half">
                            <div class="field">
                                <label class="label">Github Gist Url</label>
                                <div class="control">
                                    <InputText @bind-Value="@Post.GistUrl" class="input" type="text" placeholder="Gist Url"/>
                                    <ValidationMessage For="() => Post.GistUrl"></ValidationMessage>
                                </div>
                            </div>
                        </div>

                        <div class="column is-half">
                            <div class="field">
                                <label class="label">Github Gist File</label>
                                <div class="control">
                                    <InputText @bind-Value="@Post.GistFile" class="input" type="text" placeholder="post-01.md"/>
                                    <ValidationMessage For="() => Post.GistFile"></ValidationMessage>
                                </div>
                            </div>
                        </div>

                        <div class="column is-full">
                            <div class="field">
                                <label class="label">Render Height in Pixels</label>
                                <div class="control">
                                    <InputNumber @bind-Value="@Post.RenderedHeightInPixels" class="input" type="number" placeholder="1200"/>
                                    <ValidationMessage For="() => Post.RenderedHeightInPixels"></ValidationMessage>
                                </div>
                            </div>
                        </div>

                        <TagsSelector Tags="Post.Tags"></TagsSelector>

                        @if (IsEdit is false)
                        {
                            <div class="column is-full">
                                <div class="notification is-success is-light mt-2">
                                    <label class="checkbox">
                                        <InputCheckbox @bind-Value="@Post.IsPublished" type="checkbox"/>
                                        Do you want this post to published now?
                                    </label>
                                </div>
                            </div>
                        }

                        @if (ApiError is {})
                        {
                            <div class="column is-full">
                                <div class="notification is-danger mt-2">
                                    <p>@ApiError.Message</p>
                                </div>
                            </div>
                        }

                        <div class="column is-full">
                            <button class="button" type="submit">Save</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>

    </section>
</div>


@code {


    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(Post);
        EditContext.SetFieldCssClassProvider(new BulmaFieldClassProvider());

        await base.OnInitializedAsync();
    }

    bool IsEdit { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            Post = await _client.GetFromJsonAsync<Post>($"api/owner/blog/{Id}");
            EditContext = new EditContext(Post ?? new ());
            IsEdit = true;
        }
    }


    Post Post { get; set; } = new()
    {
        GistUrl = "https://gist.github.com/mumby0168/8ef8a2849823b90a6abb25a740ab0aa9",
        CreatedUtc = DateTime.UtcNow
    };

    EditContext EditContext { get; set; }


    List<TechTag> Tags { get; set; } = new();


    ApiError ApiError { get; set; } = null;


    async Task SavePost()
    {
        var result = await _client.PostAsJsonAsync("api/owner/blog", Post);

        if (result.IsSuccessStatusCode)
        {
            Post = new();
            if (Post.IsPublished)
            {
                _navigationManager.NavigateTo($"/posts/{Post.Id}");
            }

            _navigationManager.NavigateTo("/posts");
        }
        else if (result.IsClientError())
        {
            ApiError = result.StatusCode == HttpStatusCode.Unauthorized
                ? new() {Message = "Your authorization to our servers failed."}
                : await result.ToApiError();
        }
        else
        {
            ApiError = new ApiError() {Message = "The server is currently failing please try again."};
        }
    }

}